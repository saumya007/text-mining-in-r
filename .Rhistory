bind_tf_idf(word, author, n) %>%
arrange(desc(tf_idf)) %>%
mutate(word = factor(word, levels = rev(unique(word)))) %>%
group_by(author) %>%
top_n(15, tf_idf) %>%
ungroup %>%
mutate(author = factor(author, levels = c("Galilei, Galileo",
"Huygens, Christiaan",
"Elliot, Robert H. (Robert Henry)",
"Einstein, Albert")))
ggplot(plot_physics, aes(word, tf_idf, fill = author)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "tf-idf") +
facet_wrap(~author, ncol = 2, scales = "free") +
coord_flip() +
theme_light()
mystopwords <- data_frame(word = c("eq", "co", "rc", "ac", "ak", "bn",
"fig", "file", "cg", "cb", "cm"))
physics_words <- anti_join(physics_words, mystopwords, by = "word")
plot_physics <- physics_words %>%
bind_tf_idf(word, author, n) %>%
arrange(desc(tf_idf)) %>%
mutate(word = factor(word, levels = rev(unique(word)))) %>%
group_by(author) %>%
top_n(15, tf_idf) %>%
ungroup %>%
mutate(author = factor(author, levels = c("Galilei, Galileo",
"Huygens, Christiaan",
"Elliot, Robert H. (Robert Henry)",
"Einstein, Albert")))
ggplot(plot_physics, aes(word, tf_idf, fill = author)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "tf-idf") +
facet_wrap(~author, ncol = 2, scales = "free") +
coord_flip() +
theme_light()
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidytext)
library(janeaustenr)
austen_bigrams <- austen_books() %>%
unnest_tokens(bigram, text, tokens = "ngrams",n = 2)
library(dplyr)
library(tidytext)
library(janeaustenr)
austen_bigrams <- austen_books() %>%
unnest_tokens(bigram, text, token = "ngrams",n = 2)
austen_bigrams
austen_bigrams %>%
count(bigrams, sort=T)
austen_bigrams %>%
count(bigram, sort=T)
library(tidyr)
bigrams_separated <- austen_bigrams %>%
separate(bigram, c("word1","word2"), sep = " ")
bigrams_filtered <- bigrams_separated %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word)
# new bigram counts :
bigram_counts <- bigrams_filtered %>%
count(word1, word2, sort = T)
bigram_counts
bigrams_united <- bigrams_filtered %>%
unite(bigram, word1,word2, sep = " ")
bigrams_united
bigrams_filtered %>%
filter(word2 == "street") %>%
count(book, word, sort = T)
bigrams_filtered %>%
filter(word2 == "street") %>%
count(book, word1, sort = T)
bigram_tf_idf <- bigrams_united %>%
count(book, bigram) %>%
bind_tf_idf(bigram, book, n) %>%
arrange(desc(tf_idf))
bigram_tf_idf <- bigrams_united %>%
count(book, bigram) %>%
bind_tf_idf(bigram, book, n) %>%
arrange(desc(tf_idf))
bigram_tf_idf
bigram_tf_idf %>%
mutate(bigram = factor(bigram, levels = rev(unique(bigram)))) %>%
group_by(book) %>%
top_n(12) %>%
ungroup() %>%
ggplot(aes(bigram,tf_idf,fill = book)) +
geom_col(show.legend = F) +
labs(
x = NULL,
y = "tf-idf"
) +
facet_wrap(~book, ncol = 2, scales = "free") +
coord_flip() +
theme_light()
bigram_tf_idf %>%
mutate(bigram = factor(bigram, levels = rev(unique(bigram)))) %>%
group_by(book) %>%
top_n(12) %>%
ungroup() %>%
ggplot(aes(bigram,tf_idf,fill = book)) +
geom_col(show.legend = F) +
labs(
x = NULL,
y = "tf-idf of bigram to novel"
) +
facet_wrap(~book, ncol = 2, scales = "free") +
coord_flip() +
theme_light()
bigrams_separated %>%
filter(word1 == "not") %>%
count(word1,word2, sort = T)
AFINN <- get_sentiments("afinn")
not_words <- bigrams_separated %>%
filter(word1 == "not") %>%
inner_join(AFINN, by = c(word2 = "word")) %>%
count(word2, score, sort = T) %>%
ungroup()
not_words
not_words %>%
mutate(contribution = n * score) %>%
arrange(desc(abs(contribution))) %>%
head(20) %>%
mutate(word2 = reorder(word2, contribution)) %>%
ggplot(aes(word2, n*score, fill = n*score > 0)) +
geom_col(show.legend = F) +
xlab("Words preceded by \"not\"") +
ylab("Sentiment score * number of occurrences") +
coord_flip() +
theme_light()
not_words %>%
mutate(contribution = n * score) %>%
arrange(desc(abs(contribution))) %>%
head(20) %>%
mutate(word2 = reorder(word2, contribution)) %>%
ap_topics <- tidy(ap_lda, matrix = "beta")
library(tidytext)
ap_topics <- broom::tidy(ap_lda, matrix = "beta")
library(tidytext)
ap_topics <- tidytext::tidy(ap_lda, matrix = "beta")
library(tidytext)
ap_topics <- tidytext::tidy(ap_lda, matrix = "beta")
library(tidytext)
ap_topics <- tidy(ap_lda, matrix = "beta")
library(tidytext)
ap_topics <- tidy(ap_lda, matrix = "beta")
